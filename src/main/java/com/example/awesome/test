case class Memoize[A1, A2, B](f: (A1, A2) => B) extends ((A1, A2) => B) {
  val cache = scala.collection.mutable.Map.empty[(A1, A2), B]

  def apply(x: A1, y: A2) = cache.getOrElseUpdate((x, y), f(x, y))
}

object LCSM {
  lazy val lcsM: Memoize[Seq[String], Seq[String], Seq[String]] = Memoize {
    case (_, Nil) => Nil
    case (Nil, _) => Nil
    case (x :: xs, y :: ys) if x == y => x +: lcsM(xs, ys)
    case (x :: xs, y :: ys) => {
      (lcsM(x :: xs, ys), lcsM(xs, y :: ys)) match {
        case (a, b) if a.length > b.length => a
        case (_, d) => d
      }
    }
  }

  def isSubSequence(a: List[String], b: List[String]): Boolean = {
    a.size == lcsM(a, b).size
  }

}
